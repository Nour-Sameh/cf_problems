bool prime(ll n){ // o(sqrt(n))
    if(n<2) return false;
    // if(n==2) return false;
    for(int i=2;i*i<=n;i+=2)if(n%i==0)return false;
    return true;
}
vector<ll> get_divisors(ll n){ //o(n)
    vector<ll> divisors,primes;
    for(int i=1;i<=n;i++){
        if(n%i==0)divisors.push_back(i);
    }
    return divisors;
}
vector<ll> get_divisors1(ll n){ // o(sqrt(n))
    vector<ll> divisors;
    for(int i=1;i*i<=n;i++){
        if(n%i==0)divisors.push_back(i); // 1 2 3
        if(i*i!=n)divisors.push_back(n/i); // not squre root // 12  6 4 
    }
    return divisors;
}
vector<ll>prime_factorization(ll n){
    vector<ll>re;
    while(n!=1){
        bool divid=false;
        for(int i=2;i*i<=n;i++){ // 12  2 , 2 ,3 
            if(n%i==0){
                re.push_back(i);// 2 2
                n/=i;
                divid=true;
                break;
            }
        }
        if(!divid){ // n nfsha prime
            re.push_back(n);// 3
            n=1;
        }
    }
    return re;
}
vector<ll>prime_factorization2(ll n){ // differ in const factor 
    vector<ll>re;
    while(n!=1){
        for(int i=2;i*i<=n;i++){ 
            while(n%i==0){
                re.push_back(i);
                n/=i;
            }
        }
        if(n!=1){ 
            re.push_back(n);
            n=1;
        }
    }
    return re;
}